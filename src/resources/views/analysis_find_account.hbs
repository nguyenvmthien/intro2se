<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Savings Account Type</title>
    <link rel="stylesheet" href="/css/analysis-find-account.css">
</head>

<body>
    <div class="header">
        <h1>Analysis</h1>
        <div class="row">
            <h2>Find Account</h2>
            <button type="button" class="btn-CSV" id="csv_button" disabled>Export CSV</button>
        </div>
    </div>
    <div>
        <a id="contact-link">
            <button class="button" id="contact-button">Contact</button>
        </a>
    </div>
    <div class="input-container">
        <div class="input-ID">
            <label for="ID_account">ID Account</label>
            <input type="text" class="input-field" id="ID_account" placeholder="MSxxxx">
        </div>
        <div class="input-group">
            <label for="ID_card">ID Card</label>
            <input type="text" class="input-field" id="ID_card" placeholder="012345678">
        </div>
    </div>
    <div class="input-container-second">
        <div class="input_date_create">
            <label for="date-create">Date Create Account</label>
            <input type="date" class="input-field" id="date-create" placeholder="dd/mm/yyyy" maxlength="10">
        </div>
        <div class="type_of_saving">
            <label for="type-saving">Type of Saving</label>
            <select id="type-saving">
                <option value="">Choose type</option>
            </select>
        </div>
    </div>
    <button type="button" class="btn-primary" id="submit_button">Find</button>

    <div class="table-container">
        <table class="account-table" id="account-table">
            <caption>List of Accounts</caption>
            <thead>
                <tr>
                    <th>No</th>
                    <th>ID Account</th>
                    <th>Type of Saving</th>
                    <th>Customer's name</th>
                    <th>Balance (VND)</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <script>
        // Set up the contact link
        const currentDomain = window.location.origin;
        const contactPath = "/contact";
        const fullContactUrl = `${currentDomain}${contactPath}`;
        document.getElementById("contact-link").href = fullContactUrl;

        document.addEventListener('DOMContentLoaded', function () {
            const selectElement = document.getElementById('type-saving');
            const csvButton = document.getElementById('csv_button');
            let reportData = [];
            // Disable CSV button initially
            csvButton.disabled = true;
            // Fetch options from API
            fetch('/analysis/find-account/getAllTypeAPI')
                .then(response => response.json())
                .then(data => {
                    data.forEach(option => {
                        const optionElement = document.createElement('option');
                        optionElement.value = option.type;
                        optionElement.textContent = option.type;
                        selectElement.appendChild(optionElement);
                    });
                })
                .catch(error => {
                    console.error('Error fetching options:', error);
                });
            // Fetch newest accounts from API and render them in the table
            function fetchNewestAccounts() {
                fetch('/analysis/find-account/getNewestAccountAPI')
                    .then(response => response.json())
                    .then(data => {
                        renderTable(data);
                    })
                    .catch(error => {
                        console.error('Error fetching newest accounts:', error);
                    });
            }
            // Render table function
            function renderTable(data) {
                const tbody = document.querySelector("#account-table tbody");
                tbody.innerHTML = ""; // Clear existing rows

                if (data.length === 0) {
                    // If no data is found, render a row with the message
                    const row = document.createElement("tr");
                    row.innerHTML = `
                <td colspan="5" style="text-align: center;">
                <div style="font-size: 50px; word-break: break-word;">Oops!</div>
                <div style="font-size: 30px; word-break: break-word;">No account found.</div>
                </td>`;
                    tbody.appendChild(row);
                } else {
                    // If data is found, render the table rows
                    data.forEach((item, index) => {
                        const row = document.createElement("tr");
                        const balance = item.balance >= 0 ? Math.floor(Number(item.balance)).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') : 0;
                        row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${item.acc_id}</td>
                            <td>${item.type}</td>
                            <td>${item.name}</td>
                            <td>${balance}</td>`;
                        tbody.appendChild(row);
                    });
                }
            }
            // Initial fetch of newest accounts
            fetchNewestAccounts();
            // Fetch and render data on button click
            document.getElementById("submit_button").addEventListener("click", function () {
                var idAccount = document.getElementById("ID_account").value;
                var idCard = document.getElementById("ID_card").value;
                var dateCreate = document.getElementById("date-create").value;
                var typeSaving = document.getElementById("type-saving").value;
                fetch(`/analysis/find-account/createReportAPI?id_card=${idCard}&id_account=${idAccount}&date_created_account=${dateCreate}&type_of_saving=${typeSaving}`)
                    .then(response => response.json())
                    .then(data => {
                        if (Array.isArray(data)) {
                            renderTable(data);
                            // Always enable CSV button after fetching data
                            csvButton.disabled = false;
                            reportData = data; // Store data for CSV export
                        } else {
                            return;
                        }
                    })
                    .catch(error => console.error('Error fetching data:', error));
            });
            document.getElementById("csv_button").addEventListener("click", function () {
                if (reportData.length > 0) {
                    let csvContent = "data:text/csv;charset=utf-8,\uFEFF";
                    csvContent += "No,ID Account,Type of Saving,Customer's name,Balance (VND)\n";
                    reportData.forEach((row, index) => {
                        csvContent += `${index + 1},${row.acc_id},${row.type},${row.name},${row.balance}\n`;
                    });
                    const encodedUri = encodeURI(csvContent);
                    const link = document.createElement("a");
                    link.setAttribute("href", encodedUri);
                    link.setAttribute("download", "accounts_report.csv");
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } else {
                    // Generate empty CSV content if no data
                    let csvContent = "data:text/csv;charset=utf-8,";
                    csvContent += "No,ID Account,Type of Saving,Customer's name,Balance (VND)\n";

                    const encodedUri = encodeURI(csvContent);
                    const link = document.createElement("a");
                    link.setAttribute("href", encodedUri);
                    link.setAttribute("download", "accounts_report.csv");
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
            });
            // Function to check if all input fields are filled
            function checkInputs() {
                const idAccount = document.getElementById("ID_account").value.trim();
                const idCard = document.getElementById("ID_card").value.trim();
                const dateCreate = document.getElementById("date-create").value.trim();
                const typeSaving = document.getElementById("type-saving").value.trim();
                if (idAccount && idCard && dateCreate && typeSaving) {
                    csvButton.disabled = false;
                } else {
                    csvButton.disabled = true;
                }
            }
            // Add event listeners to input fields to check if all fields are filled
            document.querySelectorAll('.input-field, #type-saving').forEach(input => {
                input.addEventListener('input', checkInputs);
            });
        });
    </script>
</body>
</html>