<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Savings Account Type</title>
    <link rel="stylesheet" href="/css/analysis-daily-report.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div class="header">
        <h1>Analysis</h1>
        <div class="row">
            <h2>Daily Report</h2>
            <button type="button" class="btn-CSV" id="csv_button" disabled>Export CSV</button>
        </div>
    </div>
    <div>
        <a id="contact-link">
            <button class="button" id="contact-button">Contact</button>
        </a>
    </div>
    <div class="daily_report">
        <label for="date-report">Date</label>
        <input type="date" class="input-field" id="date-create" placeholder="01/01/2024">
    </div>
    <button class="create_button" id="create">Create Report</button>
    <div class="table-container">
        <table class="account-table" id="account-table">
            <caption>Deposit and Transaction Activity Report on <span id="report-date">27/12/2023</span></caption>
            <thead>
                <tr>
                    <th>Type of Savings</th>
                    <th>Total Income (VND)</th>
                    <th>Total Expense (VND)</th>
                    <th>Difference (VND)</th>
                </tr>
            </thead>
            <tbody>
                <tr class="no-data-message">
                    <td colspan="4">Insert the date</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="chart-container">
        <canvas id="myChart"></canvas>
    </div>

    <script>
        function formatDate(date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }

        function fetchData(date) {
            return fetch(`/analysis/daily-report/createReportAPI?date=${date}`)
                .then(response => response.json());
        }

        function renderTable(data) {
            const tableBody = document.querySelector('#account-table tbody');
            document.getElementById('csv_button').disabled = true;

            // Clear previous table content
            tableBody.innerHTML = '';

            let allZero = true;

            data.forEach(item => {
                if (item.total_income !== 0 || item.total_expense !== 0) {
                    allZero = false; // If any item has non-zero values, set allZero to false
                }
            });

            if (allZero) {
                // Display "Oops! No data is found" if all values are zero
                const row = document.createElement('tr');
                row.classList.add('no-data-message');
                row.innerHTML = `<td colspan="4" style="text-align: center;">Oops! No data is found</td>`;
                tableBody.appendChild(row);
                document.getElementById('csv_button').disabled = false;
            } else {
                let totalIncomeSum = 0;
                let totalExpenseSum = 0;

                data.forEach(item => {
                    // Populate table
                    const row = document.createElement('tr');
                    row.innerHTML = `
                <td>${item.type_of_saving}</td>
                <td>${item.total_income}</td>
                <td>${item.total_expense}</td>
                <td>${item.total_income - item.total_expense}</td>
            `;
                    tableBody.appendChild(row);

                    totalIncomeSum += item.total_income;
                    totalExpenseSum += item.total_expense;
                });

                // Add totals row
                const totalsRow = document.createElement('tr');
                totalsRow.innerHTML = `
            <td><strong>Total</strong></td>
            <td><strong>${totalIncomeSum}</strong></td>
            <td><strong>${totalExpenseSum}</strong></td>
            <td><strong>${totalIncomeSum - totalExpenseSum}</strong></td>
        `;
                tableBody.appendChild(totalsRow);

                // Enable CSV button after data is updated
                document.getElementById('csv_button').disabled = false;
            }
        }


        function renderChart(data) {
            const labels = [];
            const totalIncomeData = [];
            const totalExpenseData = [];

            data.forEach(item => {
                labels.push(item.type_of_saving);
                totalIncomeData.push(item.total_income);
                totalExpenseData.push(item.total_expense);
            });

            // Update chart data
            chart.data.labels = labels;
            chart.data.datasets[0].data = totalIncomeData;
            chart.data.datasets[1].data = totalExpenseData;
            chart.update();
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Calculate the previous day
            const currentDate = new Date();
            currentDate.setDate(currentDate.getDate() - 1);
            const previousDay = currentDate.toISOString().split('T')[0];
            document.getElementById('report-date').textContent = formatDate(currentDate);
            // Set up the contact link
            const currentDomain = window.location.origin;
            const contactPath = "/contact";
            const fullContactUrl = `${currentDomain}${contactPath}`;
            document.getElementById("contact-link").href = fullContactUrl;

            // Set up the CSV button event listener
            document.getElementById('csv_button').addEventListener('click', function () {
                const table = document.querySelector('.account-table');
                let csvContent = 'data:text/csv;charset=utf-8,';

                // Add the headers
                const headers = Array.from(table.querySelectorAll('thead th'))
                    .map(th => th.textContent.trim())
                    .join(',');
                csvContent += headers + '\r\n';

                // Add the rows
                const rows = Array.from(table.querySelectorAll('tbody tr'));
                const dataRows = rows.filter(row => !row.classList.contains('no-data-message'));
                dataRows.forEach(row => {
                    const rowData = Array.from(row.querySelectorAll('td'))
                        .map(td => td.textContent.trim())
                        .join(',');
                    csvContent += rowData + '\r\n';

                });

                // Create a download link and click it
                const encodedUri = encodeURI(csvContent);
                const link = document.createElement('a');
                link.setAttribute('href', encodedUri);
                link.setAttribute('download', 'daily_report.csv');
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });
        });

        document.getElementById('create').addEventListener('click', function () {
            const date = document.getElementById("date-create").value;
            if (date !== "") {
                const formattedDate = new Date(date);
                const displayDate = formatDate(formattedDate);
                document.getElementById('report-date').textContent = displayDate;

                fetchData(date).then(data => {
                    const isPreviousDay = new Date(date).toISOString().split('T')[0] === new Date(new Date().setDate(new Date().getDate() - 1)).toISOString().split('T')[0];
                    if (isPreviousDay) {
                        renderChart(data);
                        document.querySelector('#account-table tbody').innerHTML = '<tr class="no-data-message"><td colspan="4">Insert the date</td></tr>';
                    } else {
                        renderTable(data);
                        renderChart(data);
                    }
                }).catch(error => {
                    console.error('Error fetching report data:', error);
                });
            } else {
                alert('Please select a date.');
            }
        });


        var ctx = document.getElementById('myChart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Total Income',
                        data: [],
                        backgroundColor: '#7FC2FF',
                        borderWidth: 1,
                        barThickness: 30
                    },
                    {
                        label: 'Total Expense',
                        data: [],
                        backgroundColor: '#FF5F9E',
                        borderWidth: 1,
                        barThickness: 30
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            boxWidth: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                let value = context.raw || 0;
                                return new Intl.NumberFormat().format(value);
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return new Intl.NumberFormat().format(value);
                            }
                        }
                    }
                }
            }
        });
    </script>
</body>

</html>