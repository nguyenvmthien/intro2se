<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Savings Account Type</title>
    <link rel="stylesheet" href="/css/analysis-daily-report.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div class="header">
        <h1>Analysis</h1>
        <div class="row">
            <h2>Daily Report</h2>
            <button type="submit" class="btn-CSV" id="csv_button">Export CSV</button>
        </div>
    </div>
    <div>
        <a id="contact-link">
            <button class="button" id="contact-button">Contact</button>
        </a>
    </div>
    <div class="daily_report">
        <label for="date-report">Date</label>
        <input type="date" class="input-field" id="date-create" placeholder="01/01/2024">
    </div>
    <button class="create_button" id="create">Create Report</button>
    <div class="table-container">
        <table class="account-table">
            <caption>Deposit and Transaction Activity Report on <span id="report-date">27/12/2023</span></caption>
            <thead>
                <tr>
                    <th>Type of Savings</th>
                    <th>Total Income (VND)</th>
                    <th>Total Expense (VND)</th>
                    <th>Difference (VND)</th>
                </tr>
            </thead>
            <tbody>
            <tbody>
                <tr class="no-data-message">
                    <td colspan="4">Insert the date</td>
                </tr>
            </tbody>
            </tbody>
        </table>
    </div>
    <div class="chart-container">
        <canvas id="myChart"></canvas>
    </div>
    <script>
        document.getElementById('create').addEventListener('click', function () {
            var date = document.getElementById("date-create").value;
            // Convert date to dd/mm/yyyy format
            var formattedDate = new Date(date);
            var day = String(formattedDate.getDate()).padStart(2, '0');
            var month = String(formattedDate.getMonth() + 1).padStart(2, '0'); // Months are zero-indexed
            var year = formattedDate.getFullYear();
            var displayDate = `${day}/${month}/${year}`;

            // Update caption with selected date
            document.getElementById('report-date').textContent = displayDate;

            if (date !== "") {
                console.log('Calling API with type:', date);
                fetch('/analysis/daily-report/createReportAPI?date=' + date)
                    .then(response => response.json())
                    .then(data => {
                        // Clear the previous data
                        const tbody = document.querySelector('.account-table tbody');
                        tbody.innerHTML = '';
                        // Hide the "Insert the date" message
                        const noDataMessage = document.querySelector('.no-data-message');
                        if (noDataMessage) {
                            noDataMessage.style.display = 'none';
                        }


                        // Populate table with new data
                        const labels = [];
                        const totalIncomeData = [];
                        const totalExpenseData = [];

                        data.forEach(item => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                    <td>${item.type_of_saving}</td>
                                    <td>${item.total_income} VND</td>
                                    <td>${item.total_expense} VND</td>
                                    <td>${item.difference} VND</td>
                                `;
                            tbody.appendChild(row);

                            // Prepare data for chart
                            labels.push(item.type_of_saving);
                            totalIncomeData.push(item.total_income);
                            totalExpenseData.push(item.total_expense);
                        });

                        // Add total row
                        const totalRow = document.createElement('tr');
                        totalRow.classList.add('total-row');
                        const totalIncome = totalIncomeData.reduce((sum, value) => sum + parseFloat(value), 0);
                        const totalExpense = totalExpenseData.reduce((sum, value) => sum + parseFloat(value), 0);
                        totalRow.innerHTML = `
                                <td>Total</td>
                                <td>${totalIncome} VND</td>
                                <td>${totalExpense} VND</td>
                                <td>${totalIncome - totalExpense} VND</td>
                            `;
                        tbody.appendChild(totalRow);

                        // Update chart data
                        chart.data.labels = labels;
                        chart.data.datasets[0].data = totalIncomeData;
                        chart.data.datasets[1].data = totalExpenseData;
                        chart.update();
                    })
                    .catch(error => {
                        console.error('Error fetching report data:', error);
                    });
            } else {
                alert('Please select a date.');
            }
        });

        document.getElementById('csv_button').addEventListener('click', function () {
            const table = document.querySelector('.account-table');
            let csvContent = 'data:text/csv;charset=utf-8,';

            // Add the headers
            const headers = Array.from(table.querySelectorAll('thead th'))
                .map(th => th.textContent.trim())
                .join(',');
            csvContent += headers + '\r\n';

            // Add the rows
            const rows = Array.from(table.querySelectorAll('tbody tr'));
            rows.forEach(row => {
                const rowData = Array.from(row.querySelectorAll('td'))
                    .map(td => td.textContent.trim())
                    .join(',');
                csvContent += rowData + '\r\n';
            });

            // Create a download link and click it
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'daily_report.csv');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });

        var ctx = document.getElementById('myChart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [], // Initially empty, will be populated later
                datasets: [
                    {
                        label: 'Total Income',
                        data: [], // Initially empty, will be populated later
                        backgroundColor: '#7FC2FF',
                        borderWidth: 1,
                        barThickness: 30
                    },
                    {
                        label: 'Total Expense',
                        data: [], // Initially empty, will be populated later
                        backgroundColor: '#FF5F9E',
                        borderWidth: 1,
                        barThickness: 30
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            boxWidth: 20
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return context.dataset.label + ': ' + context.raw + ' VND';
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        stacked: false,
                        title: {
                            display: true,
                            text: 'Type of Savings'
                        }
                    },
                    y: {
                        stacked: false,
                        title: {
                            display: true
                        }
                    }
                }
            }
        });

        // Redirect
        document.addEventListener("DOMContentLoaded", function () {
            const currentDomain = window.location.origin;
            const contactPath = "/contact";
            const fullContactUrl = `${currentDomain}${contactPath}`;
            document.getElementById("contact-link").href = fullContactUrl;
        });
    </script>
</body>

</html>