<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Savings Account Type</title>
    <link rel="stylesheet" href="/css/analysis-monthly-report.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div class="header">
        <h1>Analysis</h1>
        <div class="row">
            <h2>Monthly Report</h2>
            <button type="button" class="btn-CSV" id="csv_button" disabled>Export CSV</button>
        </div>
    </div>
    <div>
        <a id="contact-link">
            <button class="button" id="contact-button">Contact</button>
        </a>
    </div>
    <div class="filters">
        <div class="filter-group">
            <label for="month-report">Month</label>
            <input type="month" id="month-report" name="month-report" value="2024-01" onfocus="this.value=''"
                onblur="if(this.value===''){this.value='2024-01'}">
        </div>
        <div class="filter-group">
            <label for="type-saving">Type of Saving</label>
            <select id="type-saving" name="type-saving">
                <option value="">Select Type</option>
            </select>
        </div>
    </div>
    <button class="create_button" id="create">Create Report</button>
    <div class="table-container">
        <div class="caption-container">
            <span class="table-title">Monthly Account Activity Report</span>
            <div class="filter-info">
                <span class="filter-label" id="type-saving-info">Type of Savings: --</span>
                <span class="filter-label" id="month-info">Month: --</span>
            </div>
        </div>
        <table class="account-table" id="account-table">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Day</th>
                    <th>Number of New Accounts</th>
                    <th>Number of Closed Accounts</th>
                    <th>Difference</th>
                </tr>
            </thead>
            <tbody>
                <tr class="initial-message">
                    <td colspan="5">Choose month and type of saving</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="chart-container">
        <canvas id="myChart"></canvas>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selectElement = document.getElementById('type-saving');
            const csvButton = document.getElementById('csv_button');
            const contactLink = document.getElementById('contact-link');
            let reportData = [];

            // Set up the contact link
            const currentDomain = window.location.origin;
            const contactPath = "/contact";
            const fullContactUrl = `${currentDomain}${contactPath}`;
            contactLink.href = fullContactUrl;

            // Fetch options from API
            fetch('/analysis/monthly-report/getAllTypeAPI')
                .then(response => response.json())
                .then(data => {
                    data.forEach(option => {
                        const optionElement = document.createElement('option');
                        optionElement.value = option.type;
                        optionElement.textContent = option.type;
                        selectElement.appendChild(optionElement);
                    });
                })
                .catch(error => console.error('Error fetching options:', error));

            // Initialize doughnut chart with the previous month's data
            const ctx = document.getElementById('myChart').getContext('2d');
            const chart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['New Accounts', 'Closed Accounts'],
                    datasets: [{
                        data: [0, 0],
                        backgroundColor: ['#FFA500', '#32CD32']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 25,
                                padding: 25
                            }
                        },
                        title: {
                            display: true,
                            text: 'Monthly account activities in 08-2024',
                            position: 'bottom',
                            font: {
                                size: 20,
                                weight: 400,
                                family: 'Inter'
                            },
                            padding: {
                                top: 10,
                                bottom: 10
                            }
                        }
                    },
                    layout: {
                        padding: 15
                    },
                    cutout: '70%'
                }
            });

            // Fetch and initialize chart with the previous month's data
            function initializeChart() {
                const currentDate = new Date();
                const previousMonth = new Date(currentDate.setMonth(currentDate.getMonth() - 1));
                const formattedMonth = ('0' + (previousMonth.getMonth() + 1)).slice(-2);
                const year = previousMonth.getFullYear();

                fetch(`/analysis/monthly-report/createReportAPI?month=${encodeURIComponent(formattedMonth)}&year=${encodeURIComponent(year)}&type_of_saving=${encodeURIComponent('Non-term')}`)
                    .then(response => response.json())
                    .then(data => {
                        let newAccounts = 0;
                        let closedAccounts = 0;

                        data.forEach(item => {
                            newAccounts += parseInt(item.number_of_new_account, 10) || 0;
                            closedAccounts += parseInt(item.number_of_closed_account, 10) || 0;
                        });

                        chart.data.datasets[0].data = [newAccounts, closedAccounts];
                        console.log(newAccounts);
                        chart.update();
                    })
                    .catch(error => console.error('Error initializing chart with previous month data:', error));
            }

            // Call initializeChart to set the default chart data
            initializeChart();

            document.getElementById('create').addEventListener('click', function () {
                const monthInput = document.getElementById('month-report').value;
                const typeSaving = document.getElementById('type-saving').value;
                let month, year;

                if (monthInput.includes('-')) {
                    [year, month] = monthInput.split('-');
                } else {
                    [month, year] = monthInput.split('/');
                }
                const formattedMonth = `${month}-${year}`;

                document.getElementById('month-info').textContent = `Month: ${formattedMonth}`;
                document.getElementById('type-saving-info').textContent = `Type of Savings: ${typeSaving || '--'}`;

                // Update chart title with the new month and year
                chart.options.plugins.title.text = `Monthly account activity in ${formattedMonth}`;
                chart.update(); // Make sure to call update() to apply changes

                if (month && year && typeSaving) {
                    fetch(`/analysis/monthly-report/createReportAPI?month=${encodeURIComponent(month)}&year=${encodeURIComponent(year)}&type_of_saving=${encodeURIComponent(typeSaving)}`)
                        .then(response => {
                            if (!response.ok) throw new Error('Network response was not ok');
                            return response.json();
                        })
                        .then(data => {
                            const tbody = document.querySelector('.account-table tbody');
                            tbody.innerHTML = '';  // Clear the table
                            reportData = [];
                            let newAccounts = 0;
                            let closedAccounts = 0;

                            if (data.length === 0) {
                                const row = document.createElement("tr");
                                row.classList.add("no-data-message");
                                row.innerHTML = `
                        <td colspan="5" style="text-align: center;">
                            <div style="font-size: 50px; word-break: break-word;">Oops!</div>
                            <div style="font-size: 30px; word-break: break-word;">No data found.</div>
                        </td>`;
                                tbody.appendChild(row);
                                chart.data.datasets[0].data = [0, 0];
                                chart.update();
                                csvButton.disabled = false;
                            } else {
                                data.forEach((item, index) => {
                                    // Convert the date format from yyyy/mm/dd to dd/mm/yyyy
                                    const [year, month, day] = item.date.split('-');
                                    const formattedDate = `${day}/${month}/${year}`;

                                    const row = document.createElement('tr');
                                    row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${formattedDate}</td>
                            <td>${item.number_of_new_account}</td>
                            <td>${item.number_of_closed_account}</td>
                            <td>${item.difference}</td>
                        `;
                                    tbody.appendChild(row);
                                    reportData.push({
                                        no: index + 1,
                                        date: formattedDate,
                                        number_of_new_account: item.number_of_new_account,
                                        number_of_closed_account: item.number_of_closed_account,
                                        difference: item.difference
                                    });
                                    newAccounts += parseInt(item.number_of_new_account);
                                    closedAccounts += parseInt(item.number_of_closed_account);
                                });

                                if (data.length > 10) {
                                    tbody.classList.add('scrollable');
                                } else {
                                    tbody.classList.remove('scrollable');
                                }

                                csvButton.disabled = false;
                                chart.data.datasets[0].data = [newAccounts, closedAccounts];
                                chart.update();
                            }
                        })
                        .catch(error => console.error('Error fetching report data:', error));
                }
            });
            // Handle CSV export functionality
            csvButton.addEventListener('click', function () {
                let csvContent = "data:text/csv;charset=utf-8,";
                csvContent += "No,Date,Number of New Accounts,Number of Closed Accounts,Difference\n";

                reportData.forEach(row => {
                    csvContent += `${row.no},${row.date},${row.number_of_new_account},${row.number_of_closed_account},${row.difference}\n`;
                });

                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", "monthly_report.csv");
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            });
        });
    </script>
</body>

</html>