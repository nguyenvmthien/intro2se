<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Savings Account Type</title>
    <link rel="stylesheet" href="/css/analysis-monthly-report.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div class="header">
        <h1>Analysis</h1>
        <div class="row">
            <h2>Monthly Report</h2>
            <button type="button" class="btn-CSV" id="csv_button">Export CSV</button>
        </div>
    </div>
    <div>
        <a id="contact-link">
            <button class="button" id="contact-button">Contact</button>
        </a>
    </div>
    <div class="filters">
        <div class="filter-group">
            <label for="month-report">Month (MM/YYYY)</label>
            <input type="month" id="month-report" name="month-report" value="2024-01" onfocus="this.value=''"
                onblur="if(this.value===''){this.value='2024-01'}">
        </div>
        <div class="filter-group">
            <label for="type-saving">Type of Saving</label>
            <select id="type-saving" name="type-saving">
                <option value="">Select Type</option>
            </select>
        </div>
    </div>
    <button class="create_button" id="create">Create Report</button>
    <div class="table-container">
        <div class="caption-container">
            <span class="table-title">Monthly Account Activity Report</span>
            <div class="filter-info">
                <span class="filter-label" id="type-saving-info">Type of Savings: --</span>
                <span class="filter-label" id="month-info">Month: --</span>
            </div>
        </div>
        <table class="account-table">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Day</th>
                    <th>Number of New Accounts</th>
                    <th>Number of Closed Accounts</th>
                    <th>Difference</th>
                </tr>
            </thead>
            <tbody>
                <tbody>
                <tr class="no-data-message">
                    <td colspan="4">Choose month and type of saving</td>
                </tr>
                </tbody>
            </tbody>
        </table>
    </div>

    <div class="chart-container">
        <canvas id="myChart"></canvas>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selectElement = document.getElementById('type-saving');

            // Fetch options from API
            fetch('/analysis/monthly-report/getTypeAPI')
                .then(response => response.json())
                .then(data => {
                    const existList = new Set();
                    let nonTermAdded = false;

                    data.forEach(option => {
                        const optionTypeLower = option.type.toLowerCase();

                        if (optionTypeLower === 'non-term' && !nonTermAdded) {
                            const optionElement = document.createElement('option');
                            optionElement.value = option.type;
                            optionElement.textContent = option.type;
                            selectElement.appendChild(optionElement);
                            nonTermAdded = true;
                        } else if (!existList.has(optionTypeLower)) {
                            const optionElement = document.createElement('option');
                            optionElement.value = option.type;
                            optionElement.textContent = option.type;
                            selectElement.appendChild(optionElement);
                            existList.add(optionTypeLower);
                        }
                    });
                })
                .catch(error => console.error('Error fetching options:', error));

            // Initialize doughnut chart with the previous month's data
            const currentDate = new Date();
            const previousMonth = new Date(currentDate.setMonth(currentDate.getMonth() - 1));
            const formattedMonth = ('0' + (previousMonth.getMonth() + 1)).slice(-2);
            const year = previousMonth.getFullYear();

            fetch(`/analysis/monthly-report/createReportAPI?month=${encodeURIComponent(formattedMonth)}&year=${encodeURIComponent(year)}&type_of_saving=all`)
                .then(response => response.json())
                .then(data => {
                    let newAccounts = 0;
                    let closedAccounts = 0;

                    data.forEach(item => {
                        newAccounts += item.number_of_new_account;
                        closedAccounts += item.number_of_closed_account;
                    });

                    chart.data.datasets[0].data = [newAccounts, closedAccounts];
                    chart.update();
                })
                .catch(error => console.error('Error initializing chart with previous month data:', error));

            // Event listener for creating the report
            document.getElementById('create').addEventListener('click', function () {
                const monthInput = document.getElementById('month-report').value;
                const typeSaving = document.getElementById('type-saving').value;
                let month, year;

                // Check for different formats and split accordingly
                if (monthInput.includes('-')) {
                    // Format: YYYY-MM (e.g., 2020-02)
                    [year, month] = monthInput.split('-');
                } else if (monthInput.includes('/')) {
                    // Format: MM/YYYY (e.g., 02/2020)
                    [month, year] = monthInput.split('/');
                }

                // Display month and type of savings
                document.getElementById('month-info').textContent = `Month: ${monthInput}`;
                document.getElementById('type-saving-info').textContent = `Type of Savings: ${typeSaving || '--'}`;

                if (month && year && typeSaving) {
                    // Correct fetch API format
                    fetch(`/analysis/monthly-report/createReportAPI?month=${encodeURIComponent(month)}&year=${encodeURIComponent(year)}&type_of_saving=${encodeURIComponent(typeSaving)}`)
                        .then(response => {
                            if (!response.ok) throw new Error('Network response was not ok');
                            return response.json();
                        })
                        .then(data => {
                            console.log('Dữ liệu trả về:', data);

                            // Clear the previous data
                            tbody.innerHTML = '';
                            // Hide the "Insert the date" message
                            const noDataMessage = document.querySelector('.no-data-message');
                            if (noDataMessage) {
                                noDataMessage.style.display = 'none';
                            }

                            let newAccounts = 0;
                            let closedAccounts = 0;

                            data.forEach((item, index) => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${item.date}</td>
                            <td>${item.number_of_new_account}</td>
                            <td>${item.number_of_closed_account}</td>
                            <td>${item.difference}</td>
                        `;
                                tbody.appendChild(row);

                                newAccounts += item.number_of_new_account;
                                closedAccounts += item.number_of_closed_account;
                            });

                            // Update the chart
                            chart.data.datasets[0].data = [newAccounts, closedAccounts];
                            chart.update();

                            document.getElementById('report-date').textContent = new Date().toLocaleDateString('en-GB');
                        })
                        .catch(error => console.error('Error fetching report data:', error));
                } else {
                    alert('Please select both month and type of saving.');
                }
            });

            document.getElementById('csv_button').addEventListener('click', function () {
                const monthInput = document.getElementById('month-report').value;
                const [month, year] = monthInput.split('/');
                const typeSaving = document.getElementById('type-saving').value;

                if (month && year && typeSaving) {
                    // Correct fetch API format for CSV
                    fetch(`/analysis/monthly-report/createReportAPI?month=${encodeURIComponent(month)}&year=${encodeURIComponent(year)}&type_of_saving=${encodeURIComponent(typeSaving)}`)
                        .then(response => {
                            if (!response.ok) throw new Error('Network response was not ok');
                            return response.json();
                        })
                        .then(data => {
                            let csvContent = "data:text/csv;charset=utf-8,";
                            csvContent += "No,Day,Number of New Accounts,Number of Closed Accounts,Difference\n";

                            data.forEach((item, index) => {
                                csvContent += `${index + 1},${item.date},${item.number_of_new_account},${item.number_of_closed_account},${item.difference}\n`;
                            });

                            const encodedUri = encodeURI(csvContent);
                            const link = document.createElement('a');
                            link.setAttribute('href', encodedUri);
                            link.setAttribute('download', 'monthly_report.csv');
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        })
                        .catch(error => console.error('Error exporting CSV data:', error));
                } else {
                    alert('Please select both month and type of saving.');
                }
            });

            // Initialize chart with doughnut type
            var ctx = document.getElementById('myChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['New Accounts', 'Closed Accounts'],
                    datasets: [{
                        data: [0, 0],
                        backgroundColor: ['#FFA500', '#32CD32']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 25,
                                padding: 25
                            }
                        },
                        title: {
                            display: true,
                            text: 'Monthly account activity',
                            position: 'bottom',
                            font: {
                                size: 20,
                                weight: 400,
                                family: 'Inter'
                            },
                            padding: {
                                top: 10,
                                bottom: 10
                            }
                        }
                    },
                    layout: {
                        padding: 15
                    },
                    cutout: '70%'
                }
            });
        });
        // Redirect
        document.addEventListener("DOMContentLoaded", function () {
            const currentDomain = window.location.origin;
            const contactPath = "/contact";
            const fullContactUrl = `${currentDomain}${contactPath}`;
            document.getElementById("contact-link").href = fullContactUrl;
        });

    </script>
</body>

</html>