<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Savings Account Type</title>
    <link rel="stylesheet" href="/css/analysis.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div class="header">
        <h1>Analysis</h1>
        <div class="row">
            <h2>Find Account</h2>
            <a id="find-link-detail">
                <button type="submit" class="detail" id="csv_button">Detail</button>
            </a>
        </div>
    </div>
    <div>
        <a id="contact-link">
            <button class="button" id="contact-button">Contact</button>
        </a>
    </div>

    <div class="table-container">
        <table class="account-table">
            <caption>List of Accounts</caption>
            <thead>
                <tr>
                    <th>No</th>
                    <th>ID Account</th>
                    <th>Type of Saving</th>
                    <th>Customer's Name</th>
                    <th>Balance (VND)</th>
                </tr>
            </thead>
            <tbody>
                <!-- Table rows will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

    <div class="section-container">
        <div class="section-left">
            <div class="row_1">
                <p>Daily Report</p>
                <a id="daily-link-detail">
                    <button type="submit" class="detail_1" id="csv_button">Detail</button>
                </a>
            </div>
            <div class="chart-container">
                <canvas id="barChart"></canvas>
            </div>
        </div>
        <div class="section-right">
            <div class="row_2">
                <p>Monthly Report</p>
                <a id="monthly-link-detail">
                    <button type="submit" class="detail_2" id="csv_button">Detail</button>
                </a>
            </div>
            <div class="chart-container" style="position: relative;">
                <canvas id="doughnutChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const currentDomain = window.location.origin;
            const contactPath = "/contact";
            const fullContactUrl = `${currentDomain}${contactPath}`;
            document.getElementById("contact-link").href = fullContactUrl;

            const findPath = "/analysis/find-account";
            const fullFindUrl = `${currentDomain}${findPath}`;
            document.getElementById("find-link-detail").href = fullFindUrl;

            const dailyPath = "/analysis/daily-report";
            const fullDailyUrl = `${currentDomain}${dailyPath}`;
            document.getElementById("daily-link-detail").href = fullDailyUrl;

            const monthlyPath = "/analysis/monthly-report";
            const fullMonthlyUrl = `${currentDomain}${monthlyPath}`;
            document.getElementById("monthly-link-detail").href = fullMonthlyUrl;

            // Fetch and display the 5 most recent accounts
            function fetchNewestAccounts() {
                fetch('/analysis/find-account/getNewestAccountAPI')
                    .then(response => response.json())
                    .then(data => {
                        const tbody = document.querySelector(".account-table tbody");
                        tbody.innerHTML = ""; // Clear existing rows

                        data.slice(0, 5).forEach((item, index) => {
                            const row = document.createElement("tr");
                            const balance = item.balance >= 0 ? Math.floor(Number(item.balance)).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') : 0;
                            row.innerHTML = `
                                <td>${index + 1}</td>
                                <td>${item.acc_id}</td>
                                <td>${item.type}</td>
                                <td>${item.name}</td>
                                <td>${balance}</td>
                            `;
                            tbody.appendChild(row);
                        });
                    })
                    .catch(error => console.error('Error fetching newest accounts:', error));
            }

            // Fetch and render daily report data for column chart
            function fetchDailyReport() {
                const date = new Date();
                date.setDate(date.getDate() - 1);
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const formattedDate = `${year}-${month}-${day}`;
                console.log(formattedDate);

                fetch(`/analysis/createDailyReportAPI?date=${formattedDate}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        const labels = data.map(item => item.type_of_saving);
                        const incomeData = data.map(item => item.total_income);
                        const expenseData = data.map(item => item.total_expense);

                        const ctxBar = document.getElementById('barChart').getContext('2d');
                        new Chart(ctxBar, {
                            type: 'bar',
                            data: {
                                labels: labels,
                                datasets: [
                                    {
                                        label: 'Total Income',
                                        data: incomeData,
                                        backgroundColor: '#7FC2FF',
                                        borderWidth: 1,
                                        barThickness: 30
                                    },
                                    {
                                        label: 'Total Expense',
                                        data: expenseData,
                                        backgroundColor: '#FF5F9E',
                                        borderWidth: 1,
                                        barThickness: 30
                                    }
                                ]
                            },
                            options: {
                                responsive: true,
                                plugins: {
                                    legend: {
                                        position: 'bottom',
                                        labels: {
                                            boxWidth: 20
                                        }
                                    },
                                    title: {
                                        display: true,
                                        text: 'Transactions in 03-09-2024',
                                        position: 'bottom',
                                        font: {
                                            size: 20,
                                            weight: 400,
                                            family: 'Inter'
                                        },
                                        padding: {
                                            top: 10,
                                            bottom: 10
                                        }
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function (context) {
                                                return context.dataset.label + ': ' + context.raw + ' VND';
                                            }
                                        }
                                    }
                                },
                                scales: {
                                    x: {
                                        stacked: false,
                                        title: {
                                            display: true,
                                            text: 'Type of savings'
                                        }
                                    },
                                    y: {
                                        stacked: false,
                                        title: {
                                            display: true,
                                            text: 'VND',
                                        }
                                    }
                                }
                            }
                        });
                    })
                    .catch(error => console.error('Error fetching daily report:', error));
            }

            // Fetch and render monthly report data for doughnut chart
            function fetchMonthlyReport() {
                const today = new Date();
                const year = today.getFullYear();
                const month = today.getMonth();
                const prevMonth = month === 0 ? 11 : month - 1;
                const prevYear = month === 0 ? year - 1 : year;

                const formattedMonth = (prevMonth + 1).toString().padStart(2, '0');
                console.log(formattedMonth);

                fetch(`/analysis/createMonthlyReportAPI?month=${encodeURIComponent(formattedMonth)}&year=${encodeURIComponent(prevYear)}&type_of_saving=${encodeURIComponent('Non-term')}`)
                    .then(response => response.json())
                    .then(data => {
                        let newAccounts = 0;
                        let closedAccounts = 0;
                        // Lặp qua dữ liệu để tính tổng số tài khoản mới và đóng
                        data.forEach(item => {
                            newAccounts += parseInt(item.number_of_new_account, 10) || 0;
                            closedAccounts += parseInt(item.number_of_closed_account, 10) || 0;
                        });

                        // Cập nhật biểu đồ với số liệu mới và đóng tài khoản
                        //chart.data.datasets[0].data = [newAccounts, closedAccounts];

                        const ctxDoughnut = document.getElementById('doughnutChart').getContext('2d');
                        new Chart(ctxDoughnut, {
                            type: 'doughnut',
                            data: {
                                labels: ['New accounts', 'Closed accounts'],
                                datasets: [{
                                    data: [newAccounts, closedAccounts],
                                    backgroundColor: ['#EF9C66', '#75A47F']
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: {
                                    legend: {
                                        position: 'bottom',
                                        labels: {
                                            boxWidth: 20,
                                            padding: 20
                                        }
                                    },
                                    title: {
                                        display: true,
                                        text: 'Non-term accounts in 08-2024',
                                        position: 'bottom',
                                        font: {
                                            size: 20,
                                            weight: 400,
                                            family: 'Inter'
                                        },
                                        padding: {
                                            top: 10,
                                            bottom: 10
                                        }
                                    }
                                },
                                layout: {
                                    padding: 10
                                },
                                cutout: '70%'
                            }
                        });
                    })
                    .catch(error => console.error('Error fetching monthly report:', error));
            }
            fetchNewestAccounts();
            fetchDailyReport();
            fetchMonthlyReport();
        });
    </script>
</body>

</html>